// This is your new schema.prisma file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//////////////////////
// ENUMS
//////////////////////

enum UserRole {
  ADMIN
  AFFILIATE
  CONSUMER
}

enum OrderStatus {
  PENDING_PAYMENT
  PAYMENT_CONFIRMED
  SOURCING
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum DeletionEntityType {
  PAYMENT
  POOL_MEMBER
}

enum PoolStatus {
  FILLING
  CLOSED
  SHIPPING
  READY_FOR_PICKUP
  DELIVERED
  CANCELLED
}

// --- NEW: PaymentMethod enum as requested ---
enum PaymentMethod {
  MPESA
  STRIPE
  AIRTEL_MONEY
}

//////////////////////
// MODELS
//////////////////////

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  password_hash String
  role          UserRole @default(CONSUMER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // relations
  orders          Order[]
  affiliate       Affiliate?
  pricingLogs     PriceCalculationLog[] @relation("UserPriceCalcLogs")
  pricingRequests PricingRequest[]
  refreshTokens   RefreshToken[]
  PricingLog      PricingLog[]
  createdPools    Pool[]       @relation("CreatedPools")
  poolMemberships PoolMember[]
  reviews         Review[]
  aiLogs          AiSuggestionLog[] // --- NEW RELATION ---
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Affiliate {
  id             String   @id @default(cuid())
  userId         String   @unique
  code           String   @unique
  commissionRate Float    @default(0.05)
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id])
}

model Payment {
  id        String        @id @default(cuid())
  orderId   String?
  amount    Float
  status    PaymentStatus @default(PENDING)
  
  // --- MODIFIED: Uses the new enum ---
  method    PaymentMethod

  // --- RENAMED: 'mpesa_receipt_number' is now generic ---
  providerConfirmationCode String?     // e.g., M-Pesa Receipt, Stripe Charge ID

  // --- KEPT: This is already generic (e.g., M-Pesa CheckoutRequestID) ---
  providerTransactionId   String?       @unique 
  
  transaction_date      DateTime?
  
  // --- KEPT: All provider-specific data (like M-Pesa's full callback) goes here. ---
  metadata              Json?
  
  createdAt             DateTime      @default(now())
  order                 Order?        @relation(fields: [orderId], references: [id])
  poolMember            PoolMember?   @relation("PaymentToPoolMember")

  @@index([orderId])
}


model Product {
  id        String   @id @default(cuid())
  name      String
  hsCode    String
  
  // --- MODIFIED: This is now the NEGOTIATED WHOLESALE (EXW/FOB) price ---
  basePrice     Float   
  
  // --- NEW FIELD: The "AliExpress" or individual benchmark price ---
  benchmarkPrice Float   
  
  // --- NEW FIELD: The weight per unit ---
  weightKg      Float   
  
  // --- NEW FIELD: The default route name, e.g., "China-Mombasa Sea" ---
  defaultRoute  String   

  createdAt DateTime @default(now())

  // relations
  orders      Order[]
  pools       Pool[]
  categoryId  String?
  
  // --- MODIFIED: This is now mandatory (removed '?') ---
  subcategoryId String   
  
  category    Category?    @relation(fields: [categoryId], references: [id])
  
  // --- MODIFIED: This is now mandatory (removed '?') ---
  subcategory Subcategory @relation(fields: [subcategoryId], references: [id]) 
  
  reviews     Review[]
}

// --- REPLACED 'FreightRate' with 'LogisticsRoute' ---
model LogisticsRoute {
  id                    String   @id @default(cuid())
  name                  String   @unique // e.g., "20-ft Container, Shenzhen to Mombasa"
  seaFreightCost        Float    // Fixed cost for the container
  originCharges         Float    // Fixed origin terminal handling, etc.
  portChargesMombasa    Float    // Fixed destination port charges (KPA, etc.)
  clearingAgentFee      Float    // Fixed agent fee
  inlandTransportCost   Float    // Fixed cost from Mombasa to Nairobi
  containerDeposit      Float    // Refundable deposit
  marineInsuranceRate   Float    // Per-unit rate, e.g., 0.01 (1%)
  
  createdAt             DateTime @default(now())
}

model KRARate {
  id            String    @id @default(cuid())
  hsCode        String
  duty_rate     Float     @default(0)
  rdl_rate      Float     @default(0)
  idf_rate      Float     @default(0)
  vat_rate      Float     @default(0)
  description   String?
  effectiveFrom DateTime
  effectiveTo   DateTime?
  createdAt     DateTime  @default(now())

  @@unique([hsCode, effectiveFrom])
  @@index([hsCode])
}

model PriceCalculationLog {
  id          String   @id @default(cuid())
  userId      String?
  basePrice   Float
  distanceKm  Float // This is legacy, but we leave it to avoid breaking changes
  weightKg    Float
  route       String?
  hsCode      String?
  freightRate Float?
  duty_rate   Float?
  rdl_rate    Float?
  idf_rate    Float?
  vat_rate    Float?
  taxesTotal  Float?
  commission  Float?
  finalPrice  Float
  createdAt   DateTime @default(now())
  user        User?    @relation("UserPriceCalcLogs", fields: [userId], references: [id])

  @@index([userId])
  @@index([hsCode])
  @@index([route])
}

model PricingRequest {
  id        String   @id @default(cuid())
  userId    String?
  payload   Json
  result    Json?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model Order {
  id              String      @id @default(cuid())
  order_number    String      @unique
  userId          String
  productId       String
  status          OrderStatus @default(PENDING_PAYMENT)
  final_price_ksh Float?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  user          User                 @relation(fields: [userId], references: [id])
  product       Product              @relation(fields: [productId], references: [id])
  payments      Payment[]
  statusHistory OrderStatusHistory[]

  @@index([userId])
  @@index([order_number])
}

model OrderStatusHistory {
  id         String      @id @default(cuid())
  orderId    String
  fromStatus OrderStatus
  toStatus   OrderStatus
  note       String?
  createdAt  DateTime    @default(now())
  order      Order       @relation(fields: [orderId], references: [id])

  @@index([orderId])
}

model PricingLog {
  id         String   @id @default(cuid())
  basePrice  Float
  distanceKm Float
  weightKg   Float
  finalPrice Float
  userId     String?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])
}

model Pool {
  id              String     @id @default(cuid())
  title           String
  description     String?
  imageUrl        String?
  productId       String
  pricePerUnit    Float
  targetQuantity  Int
  minJoiners      Int        @default(1) // --- MODIFIED: This will now be set by the admin setup calculator
  currentQuantity Int        @default(0)
  profitMargin    Float?
  progress        Float?     @default(0)
  cumulativeValue Float?     @default(0)
  deadline        DateTime
  status          PoolStatus @default(FILLING)
  createdById     String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  product      Product      @relation(fields: [productId], references: [id])
  creator      User         @relation("CreatedPools", fields: [createdById], references: [id])
  members      PoolMember[]
  finance      PoolFinance? @relation("PoolToFinance")
  reviews      Review[]

  @@index([status])
  @@index([createdById])
  @@index([productId])
}

model PoolFinance {
  id                       String    @id @default(cuid())
  poolId                   String    @unique
  baseCostPerUnit          Float // This is the NEGOTIATED WHOLESALE price
  
  // --- NEW FIELDS ---
  benchmarkPricePerUnit    Float?    // The calculated "AliExpress" price for savings
  totalFixedCosts          Float?    // The total container/shipping/port costs
  totalVariableCostPerUnit Float?    // The per-unit cost (wholesale + tax + insurance)
  
  // --- Legacy fields below (can be deprecated/repurposed later) ---
  logisticCost             Float?    @default(0) 
  totalRevenue             Float?    @default(0)
  totalCost                Float?    @default(0)
  grossProfit              Float?    @default(0)
  platformFee              Float?    @default(0.05) 
  platformEarning          Float?    @default(0)
  memberSavings            Float?    @default(0)
  
  isFinalized              Boolean   @default(false)
  finalizedAt              DateTime?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  pool          Pool            @relation("PoolToFinance", fields: [poolId], references: [id])
  AdminEarnings AdminEarnings[]
}

model PoolMember {
  id        String   @id @default(cuid())
  poolId    String
  userId    String
  quantity  Int      @default(1)
  paymentId String?  @unique
  joinedAt  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  pool      Pool     @relation(fields: [poolId], references: [id])
  payment   Payment? @relation("PaymentToPoolMember", fields: [paymentId], references: [id])

  @@index([poolId])
  @@index([userId])
}

model DeletionLog {
  id         String             @id @default(cuid())
  entityType DeletionEntityType
  entityId   String
  reason     String
  metadata   Json?
  deletedAt  DateTime           @default(now())

  @@index([entityType, entityId])
}

model AdminEarnings {
  id            String   @id @default(cuid())
  poolFinanceId String
  amount        Float
  description   String?
  createdAt     DateTime @default(now())
  poolFinance   PoolFinance @relation(fields: [poolFinanceId], references: [id])

  @@index([poolFinanceId])
}

model Category {
  id            String        @id @default(cuid())
  name          String        @unique
  subcategories Subcategory[]
  products      Product[]
}

model Subcategory {
  id         String   @id @default(cuid())
  name       String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  products   Product[]

  @@index([categoryId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String?
  product   Product? @relation(fields: [productId], references: [id])
  poolId    String?
  pool      Pool?    @relation(fields: [poolId], references: [id])

  @@index([userId])
  @@index([productId])
  @@index([poolId])
}

// --- NEW MODEL: GlobalSetting ---
model GlobalSetting {
  id        String   @id @default(cuid())
  key       String   @unique // e.g., "USD_TO_KES_RATE"
  value     String   // e.g., "143.5"
  notes     String?
  updatedAt DateTime @updatedAt
}

// --- NEW MODEL: AiSuggestionLog ---
model AiSuggestionLog {
  id                 String   @id @default(cuid())
  userId             String?
  productDescription String
  hsCode             String
  confidence         String
  reasoning          String?
  createdAt          DateTime @default(now())
  user               User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([hsCode])
}