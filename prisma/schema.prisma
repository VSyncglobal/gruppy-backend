// This is the correct schema.prisma file content.
// Copy this and paste it into your local prisma/schema.prisma file.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  password_hash String
  role          UserRole @default(CONSUMER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  affiliate       Affiliate?
  orders          Order[]
  createdPools    Pool[]            @relation("CreatedPools")
  poolMemberships PoolMember[]
  pricingLogs     PricingLog[]
  pricingRequests PricingRequest[]
  refreshTokens   RefreshToken[]
  reviews         Review[]
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Affiliate {
  id             String   @id @default(cuid())
  userId         String   @unique
  code           String   @unique
  commissionRate Float    @default(0.05)
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id                    String        @id @default(cuid())
  userId                String // New: To link payment to user directly
  amount                Float
  status                PaymentStatus @default(PENDING)
  method                String
  providerTransactionId String? // New: Replaces mpesa_receipt_number
  transaction_date      DateTime?
  metadata              Json?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  user       User         @relation(fields: [userId], references: [id])
  poolMember PoolMember?  @relation("PaymentToPoolMember")
  order      Order?       @relation(fields: [orderId], references: [id]) // For future use
  orderId    String?      @unique // For future use

  @@index([userId])
  @@index([status])
}

model Product {
  id            String   @id @default(cuid())
  name          String
  hsCode        String
  basePrice     Float // Note: This might be deprecated if price is per-pool
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  categoryId    String // New
  subcategoryId String // New

  category    Category    @relation(fields: [categoryId], references: [id])
  subcategory Subcategory @relation(fields: [subcategoryId], references: [id])
  orders      Order[]
  pools       Pool[]
  reviews     Review[]    @relation("ProductReviews")

  @@index([categoryId])
  @@index([subcategoryId])
}

model Category {
  id            String   @id @default(cuid())
  name          String   @unique
  createdAt     DateTime @default(now())
  products      Product[]
  subcategories Subcategory[]
}

model Subcategory {
  id         String   @id @default(cuid())
  name       String
  categoryId String
  createdAt  DateTime @default(now())
  category   Category @relation(fields: [categoryId], references: [id])
  products   Product[]

  @@index([categoryId])
}

model FreightRate {
  id        String   @id @default(cuid())
  route     String   @unique // e.g., "China-Mombasa Sea"
  ratePerKg Float // Price in KSH per KG
  createdAt DateTime @default(now())
}

model KRARate {
  id            String    @id @default(cuid())
  hsCode        String
  duty_rate     Float     @default(0)
  rdl_rate      Float     @default(0)
  idf_rate      Float     @default(0)
  vat_rate      Float     @default(0)
  description   String?
  effectiveFrom DateTime
  effectiveTo   DateTime?
  createdAt     DateTime  @default(now())

  @@unique([hsCode, effectiveFrom])
  @@index([hsCode])
}

model PricingLog {
  id          String   @id @default(cuid())
  userId      String?
  basePrice   Float
  weightKg    Float
  route       String?
  hsCode      String?
  freightRate Float?
  duty_rate   Float?
  rdl_rate    Float?
  idf_rate    Float?
  vat_rate    Float?
  taxesTotal  Float?
  commission  Float?
  finalPrice  Float
  createdAt   DateTime @default(now())
  user        User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([hsCode])
  @@index([route])
}

model PricingRequest {
  id        String   @id @default(cuid())
  userId    String?
  payload   Json
  result    Json?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

// Future model, not fully implemented
model Order {
  id              String        @id @default(cuid())
  order_number    String        @unique
  userId          String
  productId       String
  status          OrderStatus   @default(PENDING_PAYMENT)
  final_price_ksh Float?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  product         Product       @relation(fields: [productId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
  statusHistory   OrderStatusHistory[]
  payments        Payment[]

  @@index([userId])
  @@index([order_number])
}

model OrderStatusHistory {
  id         String      @id @default(cuid())
  orderId    String
  fromStatus OrderStatus
  toStatus   OrderStatus
  note       String?
  createdAt  DateTime    @default(now())
  order      Order       @relation(fields: [orderId], references: [id])

  @@index([orderId])
}

model Pool {
  id              String     @id @default(cuid())
  title           String
  description     String?
  imageUrl        String? // New
  productId       String
  pricePerUnit    Float // Final KSH price per unit
  targetQuantity  Int
  currentQuantity Int        @default(0)
  deadline        DateTime
  status          PoolStatus @default(FILLING) // New: FILLING is default
  createdById     String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  minJoiners      Int        @default(1)
  cumulativeValue Float?     @default(0)
  profitMargin    Float?
  progress        Float?     @default(0)

  creator   User          @relation("CreatedPools", fields: [createdById], references: [id])
  product   Product       @relation(fields: [productId], references: [id])
  finance   PoolFinance?  @relation("PoolToFinance")
  members   PoolMember[]
  reviews   Review[]      @relation("PoolReviews")

  @@index([status])
  @@index([createdById])
  @@index([productId])
}

model PoolFinance {
  id              String   @id @default(cuid())
  poolId          String   @unique
  baseCostPerUnit Float // The raw cost before any fees
  logisticCost    Float?   @default(0)
  totalBaseCost   Float?   @default(0) // baseCostPerUnit * targetQuantity
  totalRevenue    Float?   @default(0) // pricePerUnit * targetQuantity
  projectedProfit Float?   @default(0) // totalRevenue - totalBaseCost - logisticCost
  platformFee     Float?   @default(0.05)
  platformEarning Float?   @default(0)
  memberSavings   Float?   @default(0) // (MarketPrice - pricePerUnit) * quantity
  isFinalized     Boolean  @default(false)
  finalizedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  AdminEarnings AdminEarnings[]
  pool          Pool            @relation("PoolToFinance", fields: [poolId], references: [id], onDelete: Cascade)
}

model PoolMember {
  id        String   @id @default(cuid())
  poolId    String
  userId    String
  quantity  Int      @default(1)
  status    String   @default("PAYMENT_PENDING") // e.g., PAYMENT_PENDING, PAID, REVIEWED
  paymentId String?  @unique
  joinedAt  DateTime @default(now())

  payment Payment? @relation("PaymentToPoolMember", fields: [paymentId], references: [id])
  pool    Pool     @relation(fields: [poolId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews Review[] @relation("MemberReview")

  @@index([poolId])
  @@index([userId])
}

model Review {
  id         String   @id @default(cuid())
  rating     Int
  comment    String?
  userId     String
  productId  String
  poolId     String
  poolMemberId String? @unique // Link to the specific membership being reviewed
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  product    Product     @relation("ProductReviews", fields: [productId], references: [id])
  pool       Pool        @relation("PoolReviews", fields: [poolId], references: [id])
  poolMember PoolMember? @relation("MemberReview", fields: [poolMemberId], references: [id])

  @@index([userId])
  @@index([productId])
  @@index([poolId])
}

model DeletionLog {
  id         String             @id @default(cuid())
  entityType DeletionEntityType
  entityId   String
  reason     String
  metadata   Json?
  deletedAt  DateTime           @default(now())

  @@index([entityType, entityId])
}

model AdminEarnings {
  id            String      @id @default(cuid())
  poolFinanceId String
  amount        Float
  description   String?
  createdAt     DateTime    @default(now())
  poolFinance   PoolFinance @relation(fields: [poolFinanceId], references: [id])

  @@index([poolFinanceId])
}

enum UserRole {
  ADMIN
  AFFILIATE
  CONSUMER
}

enum OrderStatus {
  PENDING_PAYMENT
  PAYMENT_CONFIRMED
  SOURCING
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum DeletionEntityType {
  PAYMENT
  POOL_MEMBER
}

enum PoolStatus {
  FILLING // New: Replaces OPEN
  READY_TO_SHIP
  SHIPPING // New
  DELIVERED // New
  CLOSED
  CANCELLED
}